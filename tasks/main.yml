---
# File: main.yml - Main tasks for Consul

- name: Include checks/asserts
  include: asserts.yml

- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: always

# Gathers facts (bind address) from servers not currently targeted.
# 'delegate_facts' is currently rather buggy in Ansible so this might not
# always work. Hence 'consul_gather_server_facts' defaults to 'no'.
- name: Gather facts from other servers
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ consul_servers|difference(play_hosts) }}"
  ignore_errors: yes
  when: consul_gather_server_facts|bool

- name: Expose consul_bind_address as fact
  set_fact:
    consul_bind_address: "{{ consul_bind_address }}"

- name: Check bootstrapped state
  stat:
    path: /etc/consul/.consul_bootstrapped
  register: bootstrap_marker
  ignore_errors: true
  tags: always

- name: Include user/group settings
  include: user_group.yml

- name: Include dir settings
  include: dirs.yml

- name: Install OS packages and consul - locally
  include: install.yml
  when: not consul_install_remotely

- name: Install OS packages and consul - remotely
  include: install_remote.yml
  when: consul_install_remotely

# - include: ../tasks/encrypt_gossip.yml

- block:
    - name: Check for key on previously boostrapped server
      slurp:
        src: "{{ consul_config_path }}/config.json"
      register: consul_config_b64
      ignore_errors: yes

    - name: Deserialize existing config
      set_fact:
        consul_config: "{{ consul_config_b64.content | b64decode | from_json }}"
      when: consul_config_b64.content is defined

    - name: Save encryption key (from existing config)
      set_fact:
        consul_raw_key: "{{ consul_config.encrypt }}"
      when: consul_config is defined

  no_log: true
  when:
    - consul_raw_key is not defined
    - bootstrap_marker.stat.exists
    - inventory_hostname in consul_servers

# Key provided by extra vars or the above block
- name: Write key locally to share with new servers
  copy:
    content: "{{ consul_raw_key }}"
    dest: '/tmp/consul_raw.key'
  become: no
  no_log: true
  run_once: true
  register: consul_local_key
  delegate_to: localhost
  when: consul_raw_key is defined

# Generate new key if non was found
- block:
    - name: Generate gossip encryption key
      shell: "PATH={{ consul_bin_path }}:$PATH consul keygen"
      register: consul_keygen

    - name: Write key locally to share with other nodes
      copy:
        content: "{{ consul_keygen.stdout }}"
        dest: '/tmp/consul_raw.key'
      become: no
      delegate_to: localhost

  no_log: true
  run_once: true
  when:
    - not consul_local_key.changed
    - not bootstrap_marker.stat.exists

- name: Read key for servers that require it
  set_fact:
    consul_raw_key: "{{ lookup('file', '/tmp/consul_raw.key') }}"
  no_log: true
  when:
    - consul_raw_key is not defined

- name: Deleting key file
  file:
    path: '/tmp/consul_raw.key'
    state: absent
  become: no
  run_once: true
  delegate_to: localhost

- name: Consul config
  include: config.yml

- name: ACL config
  include: acl.yml
  when: consul_acl_enable

- name: TLS config
  include: tls.yml
  when: consul_tls_enable

- block:

  - name: BSD init script
    template:
      src: consul_bsdinit.j2
      dest: /etc/rc.d/consul
      owner: root
      group: wheel
      mode: 0755
    when: ansible_os_family == "FreeBSD"

  - name: SYSV init script
    template:
      src: consul_sysvinit.j2
      dest: /etc/init.d/consul
      owner: root
      group: root
      mode: 0755
    when:
      - not ansible_service_mgr == "systemd"
      - not ansible_os_family == "Debian"
      - not ansible_os_family == "FreeBSD"
      - not ansible_os_family == "Solaris"

  - name: Debian init script
    template:
      src: consul_debianinit.j2
      dest: /etc/init.d/consul
      owner: root
      group: root
      mode: 0755
    when:
      - not ansible_service_mgr == "systemd"
      - ansible_os_family == "Debian"
      - not ansible_os_family == "FreeBSD"
      - not ansible_os_family == "Solaris"

  - name: systemd script
    template:
      src: consul_systemd.service.j2
      dest: /lib/systemd/system/consul.service
      owner: root
      group: root
      mode: 0644
    when:
      - ansible_service_mgr == "systemd"
      - not ansible_os_family == "FreeBSD"
      - not ansible_os_family == "Solaris"

  - name: smf manifest
    template:
      src: consul_smf_manifest.j2
      dest: "{{ consul_smf_manifest }}"
      owner: root
      group: root
      mode: 0644
    when: ansible_os_family == "Solaris"
    register: smfmanifest

  - name: import smf manifest
    shell: "svccfg import {{ consul_smf_manifest }}"
    when:
      - smfmanifest|changed
      - ansible_os_family == "Solaris"

  - name: import smf script
    shell: "svcadm refresh consul"
    when:
      - smfmanifest|changed
      - ansible_os_family == "Solaris"


  - name: Start Consul
    service:
      name: consul
      state: started
      enabled: yes

  - name: Consul HTTP API reachable?
    wait_for:
      delay: 15
      port: 8500

  - name: Create bootstrapped marker
    file:
      dest: /etc/consul/.consul_bootstrapped
      state: touch

  - include: ../tasks/dnsmasq.yml
    when: consul_dnsmasq_enable

  - include: ../tasks/iptables.yml
    when: consul_iptables_enable

  - include: ../tasks/client.yml
    when:
      - consul_node_role == "client"
      - ansible_os_family == "Debian"

  when: not bootstrap_marker.stat.exists
