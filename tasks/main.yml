---
# File: tasks/main.yml - Main tasks for Consul

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of Ubuntu for this role"
  when: ansible_lsb.id|lower == "ubuntu" and ( ansible_distribution_version|version_compare(12.04, '<') or ansible_distribution_version|version_compare(12.10, '=') )

- name: Fail if not a new release of Debian
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of Debian for this role"
  when: ansible_lsb.id|lower == "debian" and ansible_distribution_version|version_compare(8.5, '<')

- name: Create cluster groupings
  group_by: "key={{ consul_node_role }}"

- group_by: "key=os_{{ ansible_os_family }}"

- name: "Add Consul user"
  user: "name=consul comment='Consul user' uid=1042 group=bin"

- name: "CentOS tasks"
  include: CentOS.yml
  when: ansible_distribution  == "CentOS"

- name: "Debian tasks"
  include: Debian.yml
  when: ansible_distribution  == "Debian"

- name: "Red Hat tasks"
  include: RedHat.yml
  when: ansible_distribution  == "RedHat"

- name: "Ubuntu tasks"
  include: Ubuntu.yml
  when: ansible_distribution  == "Ubuntu"

- name: Generate gossip encryption key
  shell: "PATH=/usr/local/bin:$PATH consul keygen"
  register: consul_raw_key
  run_once: true

- name: Directories
  file: "dest={{ item }} state=directory owner={{ consul_user }} group={{ consul_group}}"
  with_items:
    - /opt/consul
    - /var/consul
    - /var/log/consul
    - /var/run/consul
    - /etc/consul.d
    - /etc/consul.d/bootstrap   
    - /etc/consul.d/client
    - /etc/consul.d/server

- name: Bootstrap configuration
  template: "src=server_bootstrap_config.json.j2 dest={{ consul_config_path }}/bootstrap/config.json"

- name: Client configuration
  template: src=client_config.json.j2 dest={{ consul_config_path }}/client/config.json

- name: Server configuration
  template: src=server_config.json.j2 dest={{ consul_config_path }}/server/config.json

- name: ACL Master Token
  command: "echo {{ ansible_date_time.iso8601_micro | to_uuid }}"
  connection: local
  become: no
  run_once: True
  register: consul_acl_master_token
  when: consul_acl_enable == "true"

- name: Display ACL Master Token
  debug: msg="{{ consul_acl_master_token['stdout'] }}"
  run_once: True
  when: consul_acl_enable == "true" and consul_acl_master_token_display == "true"

- name: ACL Replication Token
  command: "echo {{ ansible_date_time.iso8601_micro | to_uuid }}"
  connection: local
  become: no
  run_once: True
  register: consul_acl_replication_token
  when: consul_acl_enable == "true"

- name: Display ACL Replication Token
  debug: msg="{{ consul_acl_replication_token['stdout'] }}"
  run_once: True
  when: consul_acl_enable == "true" and consul_acl_replication_token_display == "true"

- name: ACL bootstrap configuration
  template: src=config_acl.json.j2 dest={{ consul_config_path }}/{{ item }}/config_acl.json
  with_items:
    - bootstrap
    - client
    - server
  when: consul_acl_enable == "true"

- name: ACL policy configuration
  template: src=config_acl_policy.hcl.j2 dest={{ consul_config_path }}/{{ item }}/config_acl_policy.hcl
  with_items:
    - bootstrap
    - client
    - server
  when: consul_acl_enable == "true"

- name: Atlas configuration
  template: src=config_atlas.json.j2 dest={{ consul_config_path }}/{{ item }}/config_atlas.json
  with_items:
    - bootstrap
    - server
  when: consul_atlas_enable == "true"

- name: SYSV init script
  template: src=consul_sysvinit.j2 dest=/etc/init.d/consul owner=root group=root mode=755
  when: not ansible_distribution == "Debian"

- name: Debian init script
  template: src=consul_debian.init.j2 dest=/etc/init.d/consul owner=root group=root mode=755
  when: ansible_distribution == "Debian" and ansible_distribution_major_version|int <= 7

- name: systemd script
  template: src=consul_systemd.service.j2 dest=/lib/systemd/system/consul.service owner=root group=root mode=644
  when: ansible_distribution_major_version|int >= 7

- name: Start Consul
  service: name=consul state=started enabled=yes

- name: Consul up?
  wait_for: delay=5 path=/var/run/consul/consul.pid state=present

- name: Stop Consul
  service: name=consul state=stopped
  when: consul_node_role == "bootstrap"

- name: Reconfigure bootstrap node (systemd)
  replace: dest=/lib/systemd/system/consul.service regexp='bootstrap' replace='server' backup=no
  when: consul_node_role == "bootstrap" and ansible_distribution_major_version|int >= 7

- name: Reconfigure bootstrap node (init.d)
  replace: dest=/etc/init.d/consul regexp='bootstrap' replace='server' backup=no
  when: consul_node_role == "bootstrap" and ansible_distribution_major_version|int <= 7

- name: Reload unit configuration
  shell: systemctl daemon-reload
  when: consul_node_role == "bootstrap" and ansible_distribution_major_version|int >= 7

- name: Start Consul
  service: name=consul state=started

- name: "Enable Dnsmasq"
  include: ../tasks/dnsmasq.yml
  when: consul_dnsmasq_enable == "true"

- name: "Restart Dnsmasq"
  service: name=dnsmasq state=restarted
  when: consul_dnsmasq_enable == "true"
